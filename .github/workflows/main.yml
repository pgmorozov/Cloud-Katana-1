name: DeployCloudKatana

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    environment: Dev
    env:
      RESOURCE_NAME_PREFIX: 'SOC'
      RESOURCE_NAME_SUFFIX: 'Dev'
      AZURE_USER: '${{ secrets.AZURE_USER }}'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Azure Login
        uses: Azure/login@v1
        with:
          creds: ${{ secrets.DEPLOYMENT_SPN }}
          enable-AzPSSession: true
      - name: Deploy resource group
        uses: Azure/powershell@v1
        with:
          inlineScript:  |
            if(!(Get-AzResourceGroup|where ResourceGroupName -eq "$env:RESOURCE_NAME_PREFIX-CK-$env:RESOURCE_NAME_SUFFIX"))
            {
              New-AzResourceGroup -Name "$env:RESOURCE_NAME_PREFIX-CK-$env:RESOURCE_NAME_SUFFIX" -Location eastus
            }
          azPSVersion: "latest"
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Run deployment
        uses: Azure/powershell@v1
        with:
          inlineScript:  |
              $RGName = "$env:RESOURCE_NAME_PREFIX-CK-$env:RESOURCE_NAME_SUFFIX"
              Install-Module Az.ManagedServiceIdentity -Force -Confirm:$false
              
              $deploymentIdentityName = "$env:RESOURCE_NAME_PREFIX-DI-$env:RESOURCE_NAME_SUFFIX"
              $identity = Get-AzUserAssignedIdentity -ResourceGroupName $RGName |? Name -EQ $deploymentIdentityName
              if(!$identity)
              {
                  $identity = New-AzUserAssignedIdentity -ResourceGroupName $RGName -Name $deploymentIdentityName

                  . $env:GITHUB_WORKSPACE/resources/scripts/Grant-GraphPermissions.ps1

                  while(!$loaded){
                      try {
                          Grant-GraphPermissions -SvcPrincipalId $identity.PrincipalId -PermissionsList @('Application.ReadWrite.All','AppRoleAssignment.ReadWrite.All','DelegatedPermissionGrant.ReadWrite.All','User.Read.All') -PermissionsType application -verbose
                          $loaded = $true
                      } catch {
                        Write-Warning $_.Exception.Message
                      }
                  }
              }
              
              $resourceNames = @{
                AppName = "$($env:RESOURCE_NAME_PREFIX)CK$($env:RESOURCE_NAME_SUFFIX)";
                Identity = "$($env:RESOURCE_NAME_PREFIX)CK$($env:RESOURCE_NAME_SUFFIX)";
                ServerAppName = "$($env:RESOURCE_NAME_PREFIX)KatanaServer$($env:RESOURCE_NAME_SUFFIX)";
                ClientAppName = "$($env:RESOURCE_NAME_PREFIX)KatanaClient$($env:RESOURCE_NAME_SUFFIX)";
              }
              $AppName = $resourceNames.AppName.ToLower()
              if($AppName.Length -lt 20)
              {
                  $resourceNames.AppName = $AppName + [String]::new('0', 20-$AppName.Length)
              }
              

              $accessToken = (Get-AzAccessToken -ResourceUrl "https://graph.microsoft.com/").Token

              $Headers = @{
                  Authorization = "Bearer $accessToken"
                  "Content-Type" = "application/json"
              }
              $params = @{
                  "Method"  = "Get"
                  "Uri"     = "https://graph.microsoft.com/v1.0/users/$env:AZURE_USER"
                  "Headers" = $Headers
              }
              $principalId = (Invoke-RestMethod @params).Id

              $params = @{
                  "Method"  = "Get"
                  "Uri"     = "https://graph.microsoft.com/v1.0/users/$env:AZURE_USER/appRoleAssignments"
                  "Headers" = $Headers
              }
              $existingRoles = ((Invoke-RestMethod @params).value | ? resourceDisplayName -In ($resourceNames.ServerAppName, $resourceNames.ClientAppName)).id

              foreach($role in $existingRoles)
              {
                  $params = @{
                      "Method"  = "Delete"
                      "Uri"     = "https://graph.microsoft.com/v1.0/users/$env:AZURE_USER/appRoleAssignments/$role"
                      "Headers" = $Headers
                  }
                  Invoke-RestMethod @params
              }
              
              $scriptIdentity = Get-AzUserAssignedIdentity -ResourceGroupName $RGName |? Name -EQ $resourceNames.Identity
              if($scriptIdentity)
              {
                $principalId = $scriptIdentity.PrincipalId
                $accessToken = (Get-AzAccessToken -ResourceUrl "https://graph.microsoft.com/").Token

                $Headers = @{
                    Authorization = "Bearer $accessToken"
                    "Content-Type" = "application/json"
                }
                $params = @{
                    "Method"  = "Get"
                    "Uri"     = "https://graph.microsoft.com/v1.0/servicePrincipals/$principalId/appRoleAssignments"
                    "Headers" = $Headers
                }
                $existingRoles = (Invoke-RestMethod @params).value.id

                foreach($role in $existingRoles)
                {
                    $params = @{
                        "Method"  = "Delete"
                        "Uri"     = "https://graph.microsoft.com/v1.0/servicePrincipals/$principalId/appRoleAssignments/$role"
                        "Headers" = $Headers
                    }
                    Invoke-RestMethod @params
                }
              }

              $roleGuid = [Guid]::new([System.Security.Cryptography.MD5]::Create().ComputeHash([System.Text.Encoding]::UTF8.GetBytes($resourceNames.AppName))).Guid
              
              New-AzResourceGroupDeployment -ResourceGroupName $RGName `
                                            -TemplateFile "$env:GITHUB_WORKSPACE/azuredeploy.json" `
                                            -functionAppName 'NONAME' `
                                            -artifactsLocation "https://raw.githubusercontent.com/$env:GITHUB_REPOSITORY/${{ steps.extract_branch.outputs.branch }}" `
                                            -_resourceNames $resourceNames `
                                            -assignAppRoleToUser $env:AZURE_USER `
                                            -identityId $identity.Id `
                                            -roleGuid $roleGuid `
                                            -Verbose
          azPSVersion: "latest"
